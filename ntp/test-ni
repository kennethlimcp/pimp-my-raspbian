#!/bin/bash
. /usr/local/lib/rpiusergroup/functions/color_text

# return_code (0 - all tests passed, 1 - one or more tests failed)
return_code=0

# test scores
passed_tests=0
failed_tests=0

#init flags and parse arguments
destructive="no"
quiet="no"
prompt="yes"
for arg in "$@"
do
  case "$arg" in
    --help|-h|--h )
      echo "rpiusergroup NTP module test kit"
      echo ""
      echo "Optional arguments:-"
      echo "  --help, -h, --h       printlns this help and exits                                                   "
      echo "  --destructive         Run destructive tests. May cause system errors in other programs during test."
      echo "  --quiet, -q           Quiet mode. No output is printlned.                                            "
      echo "  --no-prompt, -np      Does not prompt for input and auto-accepts                                   "
      exit 0
      ;;
    --destructive )
      destructive="yes"
      ;;
    --quiet|-q )
      quiet="yes"
      ;;
    --no-prompt|-np )
      prompt="no"
      ;;
    *)
      echo "YELLOW - Warning, unrecognized $arg argument"
      ;;
  esac
done

function destructive_confirmation() {
  if [[ "$destructive" == "yes" ]]; then
    if [[ "$prompt" == "yes" ]]; then
      echo "Destructive tests may result in other programs to stop working"
      echo "It may also result in a non-working system after the test"
      read -n 1 -p "Run destructive tests? [y/n] " destruct_confirm
      if [[ "$destruct_confirm" != "Y" && "$destruct_confirm" != "y" ]]; then
        destructive="no"
      fi
      echo ""
    fi
  fi
}

println "Running ntp test."

# check if development or production image
rpiusergroup version | grep -e '\.[[:digit:]]-d' 1> /dev/null # check image type, development
if [[ $? -eq 0 ]]; then
  println "Development image detected." # running DEVELOPMENT image
  failure_color="yellow"
else
  println "Production image detected." # running PRODUCTION image
  failure_color="red"
fi

# Destructive tests. To be done only when rpiusergroup is offline
destructive_confirmation
if [[ "$destructive" == "yes" ]]; then
  println ""
  print "Running destructive ntp test. Unsync and resync..."
  curr_date=$(date "+%s")
  date 010100002010.00 > /dev/null
  sleep 30
  if [[ $(expr $(date "+%s") - $curr_date) < 1000 ]]; then
    return_code=1
    failed_tests=$((failed_tests+1))
    if [[ $failure_color == "red" ]]; then
      println "failed!" $failure_color
    else
      println "warning!" $failure_color
    fi
    println "Date/Time is not syncing. Date/Time is now out of sync" $failure_color
    println "Check journalctl -u systemd-timesyncd" $failure_color
  else
    println "success!" "green"
    passed_tests=$((passed_tests+1))
  fi
fi

# Safe tests
println ""
print "Checking ntp service..."
systemctl status systemd-timesyncd | grep -e 'Active:\ active' 1> /dev/null
if [[ $? -ne 0 ]]; then
  return_code=1
  failed_tests=$((failed_tests+1))
  if [[ $failure_color == "red" ]]; then
    println "failed!" $failure_color
  else
    println "warning!" $failure_color
  fi
  println "timesyncd is not running hence no syncing possible" $failure_color
  println "Check the following:" $failure_color
  println "- systemctl status systemd-timesyncd" $failure_color
  println "- journalctl -u systemd-timesyncd" $failure_color
else
  println "success!" "green"
  passed_tests=$((passed_tests+1))
fi

# test summary
total_tests=$(($passed_tests + $failed_tests))
if [[ $passed_tests -eq $total_tests ]]; then
  test_summary_color="green"
else
  test_summary_color=$failure_color
fi
println ""
println "ntp test completed: ("$passed_tests"/"$total_tests") successful." $test_summary_color
exit $return_code
